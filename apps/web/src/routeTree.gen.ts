/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ExercisesRouteRouteImport } from './routes/exercises/route'
import { Route as IndexRouteRouteImport } from './routes/index/route'
import { Route as ExercisesNewRouteRouteImport } from './routes/exercises/new/route'
import { Route as ExercisesExerciseIdRouteRouteImport } from './routes/exercises/$exerciseId/route'
import { Route as ExercisesIndexRouteRouteImport } from './routes/exercises/index/route'

const ExercisesRouteRoute = ExercisesRouteRouteImport.update({
  id: '/exercises',
  path: '/exercises',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRouteRoute = IndexRouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExercisesNewRouteRoute = ExercisesNewRouteRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => ExercisesRouteRoute,
} as any)
const ExercisesExerciseIdRouteRoute =
  ExercisesExerciseIdRouteRouteImport.update({
    id: '/$exerciseId',
    path: '/$exerciseId',
    getParentRoute: () => ExercisesRouteRoute,
  } as any)
const ExercisesIndexRouteRoute = ExercisesIndexRouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ExercisesRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/exercises': typeof ExercisesRouteRouteWithChildren
  '/exercises/': typeof ExercisesIndexRouteRoute
  '/exercises/$exerciseId': typeof ExercisesExerciseIdRouteRoute
  '/exercises/new': typeof ExercisesNewRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/exercises': typeof ExercisesIndexRouteRoute
  '/exercises/$exerciseId': typeof ExercisesExerciseIdRouteRoute
  '/exercises/new': typeof ExercisesNewRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRouteRoute
  '/exercises': typeof ExercisesRouteRouteWithChildren
  '/exercises/': typeof ExercisesIndexRouteRoute
  '/exercises/$exerciseId': typeof ExercisesExerciseIdRouteRoute
  '/exercises/new': typeof ExercisesNewRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/exercises'
    | '/exercises/'
    | '/exercises/$exerciseId'
    | '/exercises/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/exercises' | '/exercises/$exerciseId' | '/exercises/new'
  id:
    | '__root__'
    | '/'
    | '/exercises'
    | '/exercises/'
    | '/exercises/$exerciseId'
    | '/exercises/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  ExercisesRouteRoute: typeof ExercisesRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/exercises': {
      id: '/exercises'
      path: '/exercises'
      fullPath: '/exercises'
      preLoaderRoute: typeof ExercisesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/exercises/new': {
      id: '/exercises/new'
      path: '/new'
      fullPath: '/exercises/new'
      preLoaderRoute: typeof ExercisesNewRouteRouteImport
      parentRoute: typeof ExercisesRouteRoute
    }
    '/exercises/$exerciseId': {
      id: '/exercises/$exerciseId'
      path: '/$exerciseId'
      fullPath: '/exercises/$exerciseId'
      preLoaderRoute: typeof ExercisesExerciseIdRouteRouteImport
      parentRoute: typeof ExercisesRouteRoute
    }
    '/exercises/': {
      id: '/exercises/'
      path: '/'
      fullPath: '/exercises/'
      preLoaderRoute: typeof ExercisesIndexRouteRouteImport
      parentRoute: typeof ExercisesRouteRoute
    }
  }
}

interface ExercisesRouteRouteChildren {
  ExercisesIndexRouteRoute: typeof ExercisesIndexRouteRoute
  ExercisesExerciseIdRouteRoute: typeof ExercisesExerciseIdRouteRoute
  ExercisesNewRouteRoute: typeof ExercisesNewRouteRoute
}

const ExercisesRouteRouteChildren: ExercisesRouteRouteChildren = {
  ExercisesIndexRouteRoute: ExercisesIndexRouteRoute,
  ExercisesExerciseIdRouteRoute: ExercisesExerciseIdRouteRoute,
  ExercisesNewRouteRoute: ExercisesNewRouteRoute,
}

const ExercisesRouteRouteWithChildren = ExercisesRouteRoute._addFileChildren(
  ExercisesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  ExercisesRouteRoute: ExercisesRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
